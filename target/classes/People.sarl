/** 
 * 
 */
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import java.util.UUID
import io.sarl.core.Lifecycle
import io.sarl.core.DefaultContextInteractions
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Random

/** 
 * @author Emilien
 * 
 */
 
 // une personne
agent People {
	uses Logging, Lifecycle, DefaultContextInteractions
	
	
	var SelectedPartner : UUID
	var ID : int
	var byEnv : boolean
	var rand : Random
	var go = false

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		SelectedPartner = occurrence.parameters.get(0) as UUID
		byEnv = occurrence.parameters.get(1) as Boolean
		loggingName = "People"
		info("The agent was started.")
	}
	
	/*on toPeople [SelectedPartner === occurrence.source.UUID] {
		/*
		 * People : here
		 */
		//info("receive from Environment : " + occurrence.id + " - send answer")
		/*
		new toEnvironment(occurrence.id, ID).emit
	}*/

	on TrainHere{
		rand = new Random()
		if(rand.nextInt(100) > 95){
			new WantToGoIn().emit
			go = true
		}else{
			new DontWantToGoIn().emit
		}
	}
	
	on GoInTrain{
		if(go){
			info("Go in train")
			killMe
		}
	}

	on killYou{
		//killMe
	}
	
	
	on killAll{
		//killMe
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		print("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}
