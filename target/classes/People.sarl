/** 
 * 
 */
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import java.util.UUID
import io.sarl.core.Lifecycle
import io.sarl.core.DefaultContextInteractions
import java.text.SimpleDateFormat
import java.util.Date
import utils.ConsoleColors

/** 
 * @author Emilien
 * 
 */
agent People {
	uses Logging, Lifecycle, DefaultContextInteractions
	
	var SelectedPartner : UUID
	var ID : int

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		ID = occurrence.parameters.get(0) as Integer
		SelectedPartner = occurrence.parameters.get(1) as UUID
		loggingName = "People " + ID
		print("The agent was started.")
	}
	
	on toPeople [SelectedPartner === occurrence.source.UUID] {
		/* Ici, on r√©alise ce que doit faire une personne */ 
		print("receive toPeople : " + occurrence.id + " - send answer")
		new toEnvironment(occurrence.id).emit
	}

	def print(s : String) {
		System.out.println(ConsoleColors.PURPLE + "[" + (new SimpleDateFormat("HH:mm:ss")).format(new Date()) +
			", People Agent " + ID + "] " + s)
	}

	on killYou{
		killMe
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		print("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}
