/** 
 * 
 */
package utils

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.Lifecycle
import java.util.UUID
import io.sarl.core.DefaultContextInteractions

/** 
 * @author Emilien
 * 
 */
agent RailWayAgent {
	uses Logging, Lifecycle, DefaultContextInteractions

	var SelectedPartner : UUID
	var toGo  = 0
	var notToGo = 0
	var maxPeople : int

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		loggingName = "RailWay Agent"
		info("The agent was started.")
		SelectedPartner = occurrence.parameters.get(0) as UUID
		maxPeople = occurrence.parameters.get(1) as Integer
	}
	
	on TrainHere{
		toGo = 0
		notToGo = 0
	}
	
	on WantToGoIn{
		toGo++
		if((toGo + notToGo) >= maxPeople){
			new GoInTrain().emit
			maxPeople = maxPeople - toGo
			new resetMaxPeople(maxPeople).emit
		}
	}
	
	on WantToGoOut{
		maxPeople = maxPeople + occurrence.id
	}

	on DontWantToGoIn{
		notToGo++
		if ((toGo + notToGo) >= maxPeople) {
			new GoInTrain().emit
			maxPeople = maxPeople - toGo
			new resetMaxPeople(maxPeople).emit
		}
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}
