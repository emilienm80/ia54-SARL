/** 
 * 
 */
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.Lifecycle
import io.sarl.core.DefaultContextInteractions
import utils.RailWayAgent
import utils.AppearTrain

/** 
 * @author Emilien
 * 
 */
 
 // l'agent Environnement
agent Environment {
	uses Logging, Lifecycle, DefaultContextInteractions
	
	var maxPeople = 0
	var messages : int
	var messageSend = 0
	var compt = 0
	var messageMax : int

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		loggingName = "Environment Agent"
		info("The agent was started.")
		maxPeople = occurrence.parameters.get(0) as Integer
		messageMax = occurrence.parameters.get(1) as Integer
		typeof(RailWayAgent).spawn(this.ID, maxPeople)
		typeof(AppearTrain).spawn(this.ID)
		for(var i = 0; i < maxPeople; i++){
			typeof(People).spawn(this.ID, true)
		}
	
		/*Application.launch(MapsGraphic)
		var ctrl = new Viewer()
		var ispace = defaultContext.createSpace(OpenEventSpaceSpecification, UUID.randomUUID)
		ctrl.setGUISpace(ispace)
		ispace.register(asEventListener)*/
	}
	
	/*on toEnvironment [messageSend === occurrence.id]{
		messages++
		//info("reveice from People : " + occurrence.id + " |  ID People : " + occurrence.idpeople)
		if(messages <= maxPeople){
			messageSend ++
			if(messages <= maxPeople){
					messageSend ++
					if(messageSend < messageMax){
						new toPeople(messageSend).emit
						info("send toPeople : " + messageSend)
						messages = 0
					} else {
						messageSend = 0
					}
				}
			}
		}*/
	
	on killAll{
		killMe
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
		compt ++
		if (compt <= maxPeople + 2) {
			//new toPeople(messageSend).emit
			//info("send to People Message : " + messageSend)
		}
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}
