/** 
 * 
 */
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.Lifecycle
import io.sarl.core.DefaultContextInteractions
import utils.ConsoleColors
import java.text.SimpleDateFormat
import java.util.Date
import javafx.application.Application
import utils.MapsGraphic
import io.sarl.util.OpenEventSpaceSpecification
import java.util.UUID
import utils.Viewer

/** 
 * @author Emilien
 * 
 */
 
 // l'agent Environnement
agent Environment {
	uses Logging, Lifecycle, DefaultContextInteractions
	
	var maxPeople = 0
	var messages : int
	var messageSend = 0
	var messageMax : int
	var compt = 0

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		loggingName = "Environment Agent"
		print("The agent was started.")
		maxPeople = occurrence.parameters.get(0) as Integer
		messageMax = occurrence.parameters.get(1) as Integer
		for(var i = 0; i < maxPeople; i++){
			typeof(People).spawn(i, this.ID)
		}
		Application.launch(MapsGraphic)
		var ctrl = new Viewer()
		var ispace = defaultContext.createSpace(OpenEventSpaceSpecification, UUID.randomUUID)
		ctrl.setGUISpace(ispace)
		//ispace.register(asEventListener)
	}
	
	on toEnvironment [messageSend === occurrence.id]{
		messages++
		print("reveice from People : " + occurrence.id + " |  ID People : " + occurrence.idpeople)
		if(messages <= maxPeople){
			messageSend ++
			if(messageSend < messageMax){
				/*
				 * Environment : here 
				 */
				new toPeople(messageSend).emit
				print("send toPeople : " + messageSend)
				messages = 0
			} else {
				new killYou().emit
				killMe
			}
		}
	}
	
	on killAll{
		killMe
	}

	def print(s : String) {
		System.out.println(
			ConsoleColors.GREEN + "[" + (new SimpleDateFormat("HH:mm:ss")).format(new Date()) + ", Environment Agent] " + s)
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		print("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
		compt ++
		if (compt <= maxPeople) {
			new toPeople(messageSend).emit
			print("send to People Message : " + messageSend)
		}
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}
