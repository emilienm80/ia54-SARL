/** 
 * 
 */
package utils

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import java.util.UUID
import java.util.Random
import io.sarl.core.Lifecycle
import io.sarl.core.DefaultContextInteractions
import java.util.Timer
import java.util.TimerTask

/** 
 * @author Emilien
 * 
 */
agent AppearTrain {
	uses Logging, Lifecycle, DefaultContextInteractions

	var SelectedPartner : UUID
	var rand : Random
	var timer : Timer
	var thread : Thread
	
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		loggingName = "Environment Agent"
		info("Appear Train : The agent was started.")
		SelectedPartner = occurrence.parameters.get(0) as UUID
		rand = new Random()

		timer = new Timer();
		timer.schedule(new TimerTask(){
			@Override
			def run(){
				if(rand.nextInt(100) > 95){
					typeof(Train).spawn(SelectedPartner)
					new TrainHere().emit
				}
			}
		}, 0, 5000)
		/*thread = new Thread(){
			def run(){
				info("cool")
			}
		}
		//thread.start
		thread.wait(1000)*/
		
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("Appear Train : The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}
